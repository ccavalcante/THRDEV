unit uProdutos;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.StdCtrls, Vcl.Grids,
  Vcl.DBGrids, Vcl.ComCtrls, Vcl.Buttons, Vcl.ExtCtrls;

type
  TOperacao = (opNovo, opAlterar, opNavegar);

  TfmProdutos = class(TForm)
    pnButon: TPanel;
    btNovo: TSpeedButton;
    btEditar: TSpeedButton;
    btCancelar: TSpeedButton;
    btSalvar: TSpeedButton;
    btFechar: TSpeedButton;
    btExcluir: TSpeedButton;
    pgProdutos: TPageControl;
    tbProdutos: TTabSheet;
    tbCadProdutos: TTabSheet;
    gdProdutos: TDBGrid;
    Label1: TLabel;
    lbQuantidade: TLabel;
    lbValor: TLabel;
    edtDescricao: TEdit;
    edtQuantidade: TEdit;
    edtValor: TEdit;
    edtCodigo: TEdit;
    lbCodigo: TLabel;
    pnPesquisar: TPanel;
    lbDescricao: TLabel;
    edtDescricaoPes: TEdit;
    btPesquisar: TSpeedButton;
    dsPesquisar: TDataSource;
    procedure btFecharClick(Sender: TObject);
  private
    { Private declarations }
    FOperacao: TOperacao;
    procedure Novo;
    procedure Configuracoes;
    procedure Detalhar;
    procedure PesquisarProduto;
    procedure CarregarProduto;
    procedure Alterar;
    procedure Excluir;
    procedure Inserir;
  public
    { Public declarations }
  end;

var
  fmProdutos: TfmProdutos;

implementation

uses
  uControllerProduto, uAbstractProduto, udmProdutos;

{$R *.dfm}

procedure TfmProdutos.Alterar;
var
  iProduto: TAbstractProdutos;
  iControllerProduto: TControllerProduto;
  sErro: String;
begin
  iProduto := TAbstractProdutos.Create;
  iControllerProduto := TControllerProduto.Create;
  try
    with iProduto do
    begin
      IDProduto := StrToIntDef(edtCodigo.Text, 0);
      Descricao := edtDescricao.Text;
      Quantidade := edtQuantidade.Text;
      Valor := edtValor.Text;
    end;
    if iControllerProduto.AlterarProduto(iProduto, sErro) = False then
      raise Exception.Create(sErro)
    else
      showmessage('Produto alterado com sucesso!');

  finally
    FreeAndNil(iProduto);
    FreeAndNil(iControllerProduto);

  end;

end;

procedure TfmProdutos.btFecharClick(Sender: TObject);
begin
  Close;
end;

procedure TfmProdutos.CarregarProduto;
var
  iProduto: TAbstractProdutos;
  iControllerProduto: TControllerProduto;
begin
  iProduto := TAbstractProdutos.Create;
  iControllerProduto := TControllerProduto.Create;
  try
    iControllerProduto.CarregarProdutoPesquisa(iProduto, dsPesquisar.DataSet.FieldByName('IDPRODUTOS').AsInteger);
    with iProduto do
    begin
      edtCodigo.Text  := IntToStr(IDProduto);
      edtDescricao.Text := Descricao;
      edtQuantidade.Text  := Quantidade;
      edtValor.Text := Valor;
    end;
  finally
    FreeAndNil(iProduto);
    FreeAndNil(iControllerProduto);
  end;

end;

procedure TfmProdutos.Configuracoes;
begin
  tbProdutos.Visible := False;
  tbCadProdutos.Visible := False;
  pgProdutos.ActivePage := tbProdutos;
end;

procedure TfmProdutos.Detalhar;
begin
  fOperacao := opNavegar;
  pgProdutos.ActivePage := tbCadProdutos;
end;

procedure TfmProdutos.Excluir;
var
  iControllerProduto: TControllerProduto;
  sErro: String;
begin
  iControllerProduto := TControllerProduto.Create;
  try
    if (dmProdutos.cdsPesquisar.Active) and (dmProdutos.cdsPesquisar.RecordCount > 0) then
    begin
      if MessageDlg('Deseja realmente excluir esse cliente?',mtConfirmation,[mbYes, mbNo], 0) = IDYES then
      begin
        if iControllerProduto.ExcluirProduto(dmProdutos.cdsPesquisarIDPRODUTOS.AsInteger,sErro) = False then
          raise Exception.Create(sErro);
        iControllerProduto.PesquisarProduto(edtDescricaoPes.Text);
      end;
    end
    else
      raise Exception.Create('Não há registros para ser excluídos!');

  finally
    FreeAndNil(iControllerProduto);
  end;

end;

procedure TfmProdutos.Inserir;
var
  iProduto: TAbstractProdutos;
  iControllerProduto: TControllerProduto;
  sErro: String;
begin
  iProduto := TAbstractProdutos.Create;
  iControllerProduto  := TControllerProduto.create;
  try
    with iProduto do
    begin
      IDProduto := 0;
      Descricao  := edtDescricao.Text;
      Quantidade := edtQuantidade.Text;
      Valor  := edtValor.Text;

    end;
    if iControllerProduto.InserirRegistoProduto(iProduto,sErro) = False then
      raise Exception.Create(sErro)
    else
      Showmessage('Registro inserido com sucesso!');

  finally
    freeAndNil(iProduto);
    freeAndNil(iControllerProduto);

  end;

end;

procedure TfmProdutos.Novo;
begin
  FOperacao := OpNovo;
  pgProdutos.ActivePage := tbCadProdutos;
end;

procedure TfmProdutos.PesquisarProduto;
Var
  iControllerProduto: TControllerProduto;
begin
  iControllerProduto := TControllerProduto.Create;
  try
    iControllerProduto.PesquisarProduto(edtDescricaoPes.Text);
  finally
    FreeAndNil(iControllerProduto);
  end;

end;

end.
