unit udmVendas;

interface

uses
  System.SysUtils, System.Classes, Data.Win.ADODB, Data.DB, Datasnap.DBClient,
  Datasnap.Provider, uAbstractVendas,System.DateUtils;

type
  TdmVendas = class(TDataModule)
    dsPesquisar: TADODataSet;
    dspPesquisar: TDataSetProvider;
    cdsPesquisar: TClientDataSet;
    qrVendas: TADOQuery;
    qrExcluirVenda: TADOQuery;
    qrVendasItens: TADOQuery;
    qrExcluirItens: TADOQuery;
    cdsItens: TClientDataSet;
    cdsItensCodigo: TIntegerField;
    cdsItensDescricao: TStringField;
    cdsItensQuantidade: TStringField;
    cdsItensValor: TStringField;
    cdsItensValorTotal: TStringField;
    cdsPesqItensVenda: TClientDataSet;
    cdsPesqItensVendaIDVENDAS: TIntegerField;
    cdsPesqItensVendaDESCRICAO: TStringField;
    cdsPesqItensVendaQUANTIDADE: TStringField;
    cdsPesqItensVendaVALORTOTAL: TStringField;
    cdsPesqItensVendaDATAVENDA: TDateField;
  private
    { Private declarations }
  public
    { Public declarations }
    procedure PesquisarDataVenda(iVendas: TAbstractVendas; DATA: TDATE);
    procedure CarregarCliente(iVendas: TAbstractVendas; iDCliente: Integer);
    procedure CarregarProduto(iVendas: TAbstractVendas; iDProduto: Integer);
    procedure PesquisarVendas(iCodigo: Integer; iData: TDate);
    procedure CarregarVendasPesquisa(iVendas: TAbstractVendas; iCodigo: Integer);
    function InserirVendas(iVendas: TAbstractVendas; out sErro: string): Boolean;
    function ExcluirVendas(iCodigo: Integer; out sErro: String): Boolean;
    function InserirItensVenda(iVendas: TAbstractVendas; out sErro: String): Boolean;


  end;

var
  dmVendas: TdmVendas;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses uDmConexao;

{$R *.dfm}

{ TdmVendas }

procedure TdmVendas.CarregarVendasPesquisa(iVendas: TAbstractVendas;
  iCodigo: Integer);
var
  sqlVendas: TADODATASET;
begin
  sqlVendas := TADODATASET.Create(nil);
  try
    with sqlVendas do
    begin
      Connection := dmConexao.sqlConexao;
      CommandText := 'select * from Vendas where (IDVENDAS = ' + IntToStr(iCodigo) + ')';
      open;

      iVendas.IDCliente := FieldByname('IDCliente').AsInteger;
      iVendas.IDProduto := FieldByname('IDProduto').AsInteger;
      iVendas.ValorTotal := FieldByname('ValorTotal').AsString;
      iVendas.DataVenda := FieldByname('DataVenda').AsDateTime;
    end;
  finally
    freeAndNil(sqlVendas);
  end;
end;

function TdmVendas.ExcluirVendas(iCodigo: Integer; out sErro: String): Boolean;
begin
   with qrExcluirVenda do
  begin
    Sql.Clear;
    Sql.Add('delete from Venda');
    Sql.Add('where (IDVenda = :IDVenda) ');

    parameters[0].Value := iCodigo;
    try
      ExecSQL();
      Result := True;
      except on E: Exception do
      begin
        sErro := 'Ocorreu um erro ao excluir a venda selecionada!' + sLineBreak + E.Message;
        Result := False;
      end;
    end;
  end;
end;

function TdmVendas.InserirItensVenda(iVendas: TAbstractVendas;
  out sErro: String): Boolean;
var
  sqlID: TADODataSet;
begin
  sqlID := TADODataSet.Create(nil);
  try
    with sqlID do
    begin
      Connection := dmConexao.sqlConexao;
      CommandText := 'SELECT MAX(IDVENDAS) FROM VENDAS';
      open;

      iVendas.ID := FieldByname('MAX(IDVENDAS)').AsInteger;
    end;
  finally
    freeAndNil(sqlID);
  end;
  with qrVendasItens do
  begin
    parameters.ParamByName('pIDVENDAS').Value := iVENDAS.ID;
    parameters.ParamByName('pIDPRODUTOS').Value := iVendas.IDProduto;
    parameters.ParamByName('pDESCRICAO').Value  := iVendas.Descricao;
    parameters.ParamByName('pQUANTIDADE').Value := iVENDAS.Quantidade;
    parameters.ParamByName('pVALORTOTAL').Value := iVendas.ValorTotal;
    parameters.ParamByName('pDATAVENDA').Value  := Date;

    if cdsItens.Active then
      cdsItens.Open;
    cdsItens.Insert;
    cdsItens.FieldByName('Codigo').AsInteger := iVendas.IDProduto; //STRTOINT(edtCodigo.Text);
    cdsItens.FieldByName('Descricao').AsString := iVendas.Descricao; //edtDescricaoProd.Text;
    cdsItens.FieldByName('Quantidade').AsString := iVendas.Quantidade; //edtQuantidade.Text;
    cdsItens.FieldByName('Valor').AsString  := iVendas.Valor; //edtValor.Text;
    cdsItens.FieldByName('ValorTotal').AsString := iVendas.ValorTotal; //edtValorTotal.Text;
    cdsItens.Next;

    try
      execSQL;
      Result := True;
      Except on E: Exception do
      begin
        sErro := 'Ocorreu erro ao gravar os itens da venda!' + sLineBreak + E.Message;
        Result := False;
      end;

    end;

  end;
  
end;

function TdmVendas.InserirVendas(iVendas: TAbstractVendas;
  out sErro: string): Boolean;
begin

  with qrVendas do
  begin
    parameters.ParamByName('pIDClientes').Value := iVendas.IDCliente;
    parameters.ParamByName('pDATAVENDA').Value := Date;
    try
      execSQL;
      Result := True;
      except
      on E: Exception do
      begin
        sErro := 'Ocorreu um erro ao gravar a venda!' + sLineBreak + E.Message;
        Result := False;
      end;

    end;
  end;
end;

procedure TdmVendas.CarregarCliente(iVendas: TAbstractVendas; iDCliente: Integer);
var
  sqlCliente: TADODATASET;
begin
  sqlCliente := TADODATASET.Create(nil);
  try
    with sqlCliente do
    begin
      Connection := dmConexao.sqlConexao;
      commandText := 'select IDCLIENTE, NOME from Clientes where (IDCLIENTE = ' + IntToStr(iDCliente) + ')';
      open;

      iVendas.IDCliente := FieldByname('IDCLIENTE').AsInteger;
      iVendas.Nome  := FieldByname('NOME').AsString;
    end;
  finally
    freeAndNil(sqlCliente);
  end;

end;

procedure TdmVendas.CarregarProduto(iVendas: TAbstractVendas;
  iDProduto: Integer);
var
  sqlProduto: TADODATASET;
begin
  sqlProduto := TADODATASET.Create(nil);
  try
    with sqlProduto do
    begin
      Connection := dmConexao.sqlConexao;
      CommandText := 'select IDPRODUTOS, DESCRICAO, VALOR FROM Produtos where (IDPRODUTOS = ' + IntToStr(iDProduto) + ')';
      open;

      iVendas.IDProduto := FieldByName('IDPRODUTOS').AsInteger;
      iVendas.Descricao := FieldByName('DESCRICAO').AsString;
      iVendas.Valor := FieldByName('VALOR').AsString;
    end;
  finally
    FreeAndNil(sqlProduto);
  end;
end;

procedure TdmVendas.PesquisarDataVenda(iVendas: TAbstractVendas; DATA: TDATE);
var
  sqlDATA: TADODATASET;
begin
  sqlDATA := TADODATASET.Create(nil);
  try
    with sqlDATA do
    begin
      Connection := dmConexao.sqlConexao;
      CommandText := 'select IDVENDAS, DESCRICAO, QUANTIDADE, VALORTOTAL, DATAVENDA from ItensVenda where (DATAvenda = ' + datetostr(DATA) + ')' ;
      open;

      iVendas.ID  := FieldByName('IDVENDAS').AsInteger;
      iVendas.Descricao := FieldByName('DESCRICAO').AsString;
      iVendas.Quantidade  := FieldByname('QUANTIDADE').Asstring;
      iVendas.ValorTotal  := FieldByname('VALORTOTAL').AsString;
      iVendas.DataVenda := FieldByName('DATAVENDA').AsDateTime;

      if cdsPesqItensVenda.Active then
        cdsPesqItensVenda.Open;
      cdsPesqItensVenda.Insert;
      with cdsPesqItensVenda do
      begin
        FieldByname('IDVENDAS').AsInteger := iVendas.ID;
        FieldByname('DESCRICAO').AsString := iVendas.Descricao;
        FieldByname('QUANTIDADE').AsString := iVendas.Quantidade;
        FieldByname('VALORTOTAL').AsString := iVendas.ValorTotal;
        FieldByname('DATAVENDA').AsDateTime := iVendas.DataVenda;
        next;
      end;

    end;
  finally
    freeAndNil(iVendas);

  end;

end;

procedure TdmVendas.PesquisarVendas(iCodigo: Integer; iData: TDATE);
begin

  if cdsPesquisar.Active then
    cdsPesquisar.Close;
  cdsPesquisar.ParamByName('pIDVENDAS').AsInteger :=  iCodigo;
  cdsPesquisar.ParamByName('pDATAVENDA').AsDate := iDATA;
  cdsPesquisar.Open;
  cdsPesquisar.First;

end;

end.
